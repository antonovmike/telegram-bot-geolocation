2022/05/14 15:50:55 Micro started
2022/05/14 15:50:58 Starting server rust
2022/05/14 15:50:58 send rust sending initialize Content-Length: 568

{"jsonrpc": "2.0", "id": 0, "method": "initialize", "params": {"processId": 1517, "rootUri": "file:///home/mike/projects/tgbot/kofe", "workspaceFolders": [{"name": "root", "uri": "file:///home/mike/projects/tgbot/kofe"}], "initializationOptions": {}, "capabilities": {"textDocument": {"hover": {"contentFormat": ["plaintext", "markdown"]}, "publishDiagnostics": {"relatedInformation": false, "versionSupport": false, "codeDescriptionSupport": true, "dataSupport": true}, "signatureHelp": {"signatureInformation": {"documentationFormat": ["plaintext", "markdown"]}}}}}}
2022/05/14 15:50:58 send rust queueing initialized
2022/05/14 15:50:58 Starting server python
2022/05/14 15:50:58 send python sending initialize Content-Length: 568

{"jsonrpc": "2.0", "id": 0, "method": "initialize", "params": {"processId": 1517, "rootUri": "file:///home/mike/projects/tgbot/kofe", "workspaceFolders": [{"name": "root", "uri": "file:///home/mike/projects/tgbot/kofe"}], "initializationOptions": {}, "capabilities": {"textDocument": {"hover": {"contentFormat": ["plaintext", "markdown"]}, "publishDiagnostics": {"relatedInformation": false, "versionSupport": false, "codeDescriptionSupport": true, "dataSupport": true}, "signatureHelp": {"signatureInformation": {"documentationFormat": ["plaintext", "markdown"]}}}}}}
2022/05/14 15:50:58 send python queueing initialized
2022/05/14 15:50:58 Starting server typescript
2022/05/14 15:50:58 send typescript sending initialize Content-Length: 600

{"jsonrpc": "2.0", "id": 0, "method": "initialize", "params": {"processId": 1517, "rootUri": "file:///home/mike/projects/tgbot/kofe", "workspaceFolders": [{"name": "root", "uri": "file:///home/mike/projects/tgbot/kofe"}], "initializationOptions": {"importMap": "./import_map.json"}, "capabilities": {"textDocument": {"hover": {"contentFormat": ["plaintext", "markdown"]}, "publishDiagnostics": {"relatedInformation": false, "versionSupport": false, "codeDescriptionSupport": true, "dataSupport": true}, "signatureHelp": {"signatureInformation": {"documentationFormat": ["plaintext", "markdown"]}}}}}}
2022/05/14 15:50:58 send typescript queueing initialized
2022/05/14 15:50:58 ONBUFFEROPEN rust
2022/05/14 15:50:58 Found running lsp server for  rust firing textDocument/didOpen...
2022/05/14 15:50:58 send rust queueing textDocument/didOpen
2022/05/14 15:50:58 ONBUFFEROPEN unknown
2022/05/14 15:50:58 ONBUFFEROPEN unknown
2022/05/14 15:50:58 ONEXIT python 
2022/05/14 15:50:58 ONEXIT typescript 
2022/05/14 15:50:59 send rust sending Content-Length: 57

{"jsonrpc": "2.0", "method": "initialized", "params": {}}
2022/05/14 15:50:59 send rust sending Content-Length: 8440

{"jsonrpc": "2.0", "method": "textDocument/didOpen", "params": {"textDocument": {"uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs", "languageId": "rust", "version": 1, "text": "#![allow(unused)]\n\nuse geo::prelude::*;\nuse geo::point;\nuse carapax::types::{\n\tMessage, MessageData, InputFile, \n\tInlineKeyboardButton, TextEntity,\n};\nuse carapax::methods::SendPhoto;\nuse carapax::{\n    longpoll::LongPoll,\n    methods::SendMessage,\n    types::{ChatId, Text},\n    Api, App, Context, ExecuteError, Ref,\n};\nuse dotenv::dotenv;\nuse std::env;\nuse carapax::types::User;\nuse serde::{Deserialize, Serialize};\n\nuse crate::catalog::kofe_list;\n\nmod catalog;\n\n\n#[derive(Deserialize, Serialize)]\nstruct CallbackData {\n    value: String,\n}\n\nimpl CallbackData {\n    fn new<S: Into<String>>(value: S) -> Self {\n        Self { value: value.into() }\n    }\n}\n\nfn calculator(lat_user: f64, lon_user: f64, location_x: f64, location_y: f64) -> i32 {\n    //let earth_radius_kilometer = 6371.0_f64;\n    //let (user_latitude_degrees, user_longitude_degrees) = (lat_user, lon_user);\n    //let (caffee_latitude_degrees, caffee_longitude_degrees) = (location_x, location_y);\n\n    //let user_latitude = user_latitude_degrees.to_radians();\n    //let caffee_latitude = caffee_latitude_degrees.to_radians();\n\n    //let delta_latitude = (user_latitude_degrees - caffee_latitude_degrees).to_radians();\n    //let delta_longitude = (user_longitude_degrees - caffee_longitude_degrees).to_radians();\n\n    //let central_angle_inner = (delta_latitude / 2.0).sin().powi(2)\n        //+ user_latitude.cos() * caffee_latitude.cos() * (delta_longitude / 2.0).sin().powi(2);\n    //let central_angle = 2.0 * central_angle_inner.sqrt().asin();\n\n    //let result = (earth_radius_kilometer * central_angle * 100000.0).round() as i32;\n    //result\n    (lat_user * lon_user * 1000000.0 - location_x * location_y * 1000000.0) as i32\n}\n\nfn distance(lat_user: f64, lon_user: f64) -> (\nString, String, String, \nString, String, String, \nString, String, String, \nString, String, String ) {\n    // dbg!(&lat_user);\n    // dbg!(&lon_user);\n    let mut temporary_collection = vec![];\n\n    let point_user = point!(x: lat_user, y: lon_user);\n// ITERATION\n    for index in 0..kofe_list().len() {\n\t\tlet calculated_distance: i32 = calculator(lat_user, lon_user, kofe_list()[index].location_x, kofe_list()[index].location_y);\n        //dbg!(&calculated_distance);\n        //let point_destination = point!(x: kofe_list()[index].location_x, y: kofe_list()[index].location_y);\n        //let calculated_distance: i32 = point_user.haversine_distance(&point_destination).round() as i32;\n        temporary_collection.push((\n\t\t\tcalculated_distance,                    // 0\n\t\t\tkofe_list()[index].description.clone(), // 1\n\t\t\tkofe_list()[index].photo.clone(),       // 2\n\t\t\tkofe_list()[index].google_maps.clone(), // 3\n\t\t\tkofe_list()[index].address.clone(),     // 4\n\t\t));\n    }\n    temporary_collection.sort_by(|a, b| a.0.cmp(&b.0));\n    dbg!(&temporary_collection[0].0.clone());\n    //dbg!(&temporary_collection[0].1.clone());\n    dbg!(&temporary_collection[1].0.clone());\n    //dbg!(&temporary_collection[1].1.clone());\n    dbg!(&temporary_collection[2].0.clone());\n    //dbg!(&temporary_collection[2].1.clone());\n    let one   = format!(\"{}\\n\", temporary_collection[0].1);\n    let two   = format!(\"{}\\n\", temporary_collection[1].1);\n    let three = format!(\"{}\\n\", temporary_collection[2].1);\n    (one,  temporary_collection[0].2.clone(), temporary_collection[0].3.clone(), temporary_collection[0].4.clone(), \n    two,   temporary_collection[1].2.clone(), temporary_collection[1].3.clone(), temporary_collection[1].4.clone(), \n    three, temporary_collection[2].2.clone(), temporary_collection[2].3.clone(), temporary_collection[2].4.clone() )\n}\n\nasync fn echo(api: Ref<Api>, chat_id: ChatId, message: Message) -> Result<(), ExecuteError> {\n\t//let method = SendMessage::new(chat_id.clone(), \"TEST\".to_string()).reply_markup(vec![vec![\n        //InlineKeyboardButton::with_url(\"TEST\", \"https://duckduckgo.com/\".to_string()),\n    //]]);\n    //api.execute(method).await?;\n    // dbg!(&message);\n    if let MessageData::Location(location) = message.data {\n        let lon: f64 = location.longitude.into();\n        let lat: f64 = location.latitude.into();\n        let calculated_distance = distance(lon, lat);\n// 1st Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.1.clone())\n                    .await\n                    .unwrap(),\n            )\n            .caption(calculated_distance.0)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ1\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.3.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.2.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n// 2nd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.5).await.unwrap(),\n            )\n            .caption(calculated_distance.4)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ2\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.7.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n\t\t\t\t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.6.to_string()\n\t\t\t),\n        ]]);\n        api.execute(method).await?;\n// 3rd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.9).await.unwrap(),\n            )\n            .caption(calculated_distance.8)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ3\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.11.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.10.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n        // dbg!(\"F\");\n    } else {\n\t\tlet warning_message = \"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.\".to_string();\n\t\tlet method = SendMessage::new(chat_id.clone(), warning_message);\n        api.execute(method).await?;\n\t};\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    dotenv().ok();\n    env_logger::init();\n\n    let token = env::var(\"CARAPAX_TOKEN\").expect(\"CARAPAX_TOKEN is not set\");\n    let api = Api::new(token).expect(\"Failed to create API\");\n\n    let mut context = Context::default();\n    context.insert(api.clone());\n\n    let app = App::new(context, echo);\n    LongPoll::new(api, app).run().await\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\t#[test]\n\tfn fabrika_eleven_window() {\n        let list_1 = distance(41.709530, 44.802610); // FABRIKA\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t#[test]\n\tfn lamarzocco_eleven_window() {\n        let list_1 = distance(41.710275, 44.766336); // Lamarzocco\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t\n\t#[test]\n\tfn calculator_1() {\n\t\tlet calc_1 = calculator(41.710275, 44.766336, 41.710275, 44.766336); // Lamarzocco + Lamarzocco\n\t\tlet calc_2 = calculator(41.695242, 44.793238, 41.710275, 44.766336); // Eleven.window + Lamarzocco\n\t\tlet calc_3 = calculator(41.708954, 44.755021, 41.693138, 44.802658); // Erti Kava + Daily grind\n\t\tassert_ne!(calc_1, calc_2);\n\t\tassert_ne!(calc_1, calc_3);\n\t\tassert_ne!(calc_2, calc_3);\n        //for index in 0..kofe_list().len() {\n\t\t\t//calculator(lat_user: f64, lon_user: f64, kofe_list()[index].location_x, kofe_list()[index].location_y)\n\t\t//}\n\t}\n}\n"}}}
2022/05/14 15:50:59 Unhandled message 1 rust Content-Length: 137

{"jsonrpc":"2.0","method":"window/progress","params":{"done":null,"id":"progress_1","message":null,"percentage":null,"title":"Building"}}
2022/05/14 15:51:00 Unhandled message 1 rust Content-Length: 139

{"jsonrpc":"2.0","method":"window/progress","params":{"done":null,"id":"progress_1","message":"kofe","percentage":null,"title":"Building"}}
2022/05/14 15:51:00 Unhandled message 1 rust Content-Length: 149

{"jsonrpc":"2.0","method":"window/progress","params":{"done":null,"id":"progress_1","message":"kofe cfg(test)","percentage":null,"title":"Building"}}
2022/05/14 15:51:02 Unhandled message 1 rust Content-Length: 137

{"jsonrpc":"2.0","method":"window/progress","params":{"done":true,"id":"progress_1","message":null,"percentage":null,"title":"Building"}}
2022/05/14 15:51:02 Unhandled message 1 rust Content-Length: 137

{"jsonrpc":"2.0","method":"window/progress","params":{"done":null,"id":"progress_0","message":null,"percentage":null,"title":"Indexing"}}
2022/05/14 15:51:03 Unhandled message 1 rust Content-Length: 137

{"jsonrpc":"2.0","method":"window/progress","params":{"done":true,"id":"progress_0","message":null,"percentage":null,"title":"Indexing"}}
2022/05/14 15:53:50 snippets-plugin -> function onBeforeTextEvent(ev) = userdata: 0xc0007de840
2022/05/14 15:53:50 send rust sending textDocument/didChange Content-Length: 8443

{"jsonrpc": "2.0", "method": "textDocument/didChange", "params": {"textDocument": {"version": 1, "uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs"}, "contentChanges": [{"text": "#![allow(unused)]\n\nuse geo::prelude::*;\nuse geo::point;\nuse carapax::types::{\n\tMessage, MessageData, InputFile, \n\tInlineKeyboardButton, TextEntity,\n};\nuse carapax::methods::SendPhoto;\nuse carapax::{\n    longpoll::LongPoll,\n    methods::SendMessage,\n    types::{ChatId, Text},\n    Api, App, Context, ExecuteError, Ref,\n};\nuse dotenv::dotenv;\nuse std::env;\nuse carapax::types::User;\nuse serde::{Deserialize, Serialize};\n\nuse crate::catalog::kofe_list;\n\nmod catalog;\n\n\n#[derive(Deserialize, Serialize)]\nstruct CallbackData {\n    value: String,\n}\n\nimpl CallbackData {\n    fn new<S: Into<String>>(value: S) -> Self {\n        Self { value: value.into() }\n    }\n}\n\nfn calculator(lat_user: f64, lon_user: f64, location_x: f64, location_y: f64) -> i32 {\n    //let earth_radius_kilometer = 6371.0_f64;\n    //let (user_latitude_degrees, user_longitude_degrees) = (lat_user, lon_user);\n    //let (caffee_latitude_degrees, caffee_longitude_degrees) = (location_x, location_y);\n\n    //let user_latitude = user_latitude_degrees.to_radians();\n    //let caffee_latitude = caffee_latitude_degrees.to_radians();\n\n    //let delta_latitude = (user_latitude_degrees - caffee_latitude_degrees).to_radians();\n    //let delta_longitude = (user_longitude_degrees - caffee_longitude_degrees).to_radians();\n\n    //let central_angle_inner = (delta_latitude / 2.0).sin().powi(2)\n        //+ user_latitude.cos() * caffee_latitude.cos() * (delta_longitude / 2.0).sin().powi(2);\n    //let central_angle = 2.0 * central_angle_inner.sqrt().asin();\n\n    //let result = (earth_radius_kilometer * central_angle * 100000.0).round() as i32;\n    //result\n    (lat_user * lon_user * 1000000.0 - location_x * location_y * 1000000.0) as i32\n}\n\nfn distance(lat_user: f64, lon_user: f64) -> (\nString, String, String, \nString, String, String, \nString, String, String, \nString, String, String ) {\n    // dbg!(&lat_user);\n    // dbg!(&lon_user);\n    let mut temporary_collection = vec![];\n\n    let point_user = point!(x: lat_user, y: lon_user);\n// ITERATION\n    for index in 0..kofe_list().len() {\n\t\tlet calculated_distance: i32 = calculator(lat_user, lon_user, kofe_list()[index].location_x, kofe_list()[index].location_y);\n        //dbg!(&calculated_distance);\n        //let point_destination = point!(x: kofe_list()[index].location_x, y: kofe_list()[index].location_y);\n        //let calculated_distance: i32 = point_user.haversine_distance(&point_destination).round() as i32;\n        temporary_collection.push((\n\t\t\tcalculated_distance,                    // 0\n\t\t\tkofe_list()[index].description.clone(), // 1\n\t\t\tkofe_list()[index].photo.clone(),       // 2\n\t\t\tkofe_list()[index].google_maps.clone(), // 3\n\t\t\tkofe_list()[index].address.clone(),     // 4\n\t\t));\n    }\n    temporary_collection.sort_by(|a, b| a.0.cmp(&b.0));\n    dbg!(&temporary_collection[0].0.clone());\n    //dbg!(&temporary_collection[0].1.clone());\n    dbg!(&temporary_collection[1].0.clone());\n    //dbg!(&temporary_collection[1].1.clone());\n    dbg!(&temporary_collection[2].0.clone());\n    //dbg!(&temporary_collection[2].1.clone());\n    let one   = format!(\"{}\\n\", temporary_collection[0].1);\n    let two   = format!(\"{}\\n\", temporary_collection[1].1);\n    let three = format!(\"{}\\n\", temporary_collection[2].1);\n    (one,  temporary_collection[0].2.clone(), temporary_collection[0].3.clone(), temporary_collection[0].4.clone(), \n    two,   temporary_collection[1].2.clone(), temporary_collection[1].3.clone(), temporary_collection[1].4.clone(), \n    three, temporary_collection[2].2.clone(), temporary_collection[2].3.clone(), temporary_collection[2].4.clone() )\n}\n\nasync fn echo(api: Ref<Api>, chat_id: ChatId, message: Message) -> Result<(), ExecuteError> {\n\t//let method = SendMessage::new(chat_id.clone(), \"TEST\".to_string()).reply_markup(vec![vec![\n        //InlineKeyboardButton::with_url(\"TEST\", \"https://duckduckgo.com/\".to_string()),\n    //]]);\n    //api.execute(method).await?;\n    // dbg!(&message);\n    if let MessageData::Location(location) = message.data {\n        let lon: f64 = location.longitude.into();\n        let lat: f64 = location.latitude.into();\n        let calculated_distance = distance(lon, lat);\n// 1st Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.1.clone())\n                    .await\n                    .unwrap(),\n            )\n            .caption(calculated_distance.0)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ1\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.3.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.2.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n// 2nd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.5).await.unwrap(),\n            )\n            .caption(calculated_distance.4)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ2\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.7.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n\t\t\t\t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.6.to_string()\n\t\t\t),\n        ]]);\n        api.execute(method).await?;\n// 3rd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.9).await.unwrap(),\n            )\n            .caption(calculated_distance.8)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ3\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.11.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.10.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n        // dbg!(\"F\");\n    } else {\n\t\tlet warning_message = \"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.\".to_string();\n\t\tlet method = SendMessage::new(chat_id.clone(), warning_message);\n        api.execute(method).await?;\n\t};\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    dotenv().ok();\n    env_logger::init();\n\n    let token = env::var(\"CARAPAX_TOKEN\").expect(\"CARAPAX_TOKEN is not set\");\n    let api = Api::new(token).expect(\"Failed to create API\");\n\n    let mut context = Context::default();\n    context.insert(api.clone());\n\n    let app = App::new(context, echo);\n    LongPoll::new(api, app).run().await\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\t#[test]\n\tfn fabrika_eleven_window() {\n        let list_1 = distance(41.709530, 44.802610); // FABRIKA\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t#[test]\n\tfn lamarzocco_eleven_window() {\n        let list_1 = distance(41.710275, 44.766336); // Lamarzocco\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t\n\t#[test]\n\tfn calculator_1() {\n\t\tlet calc_1 = calculator(41.710275, 44.766336, 41.710275, 44.766336); // Lamarzocco + Lamarzocco\n\t\tlet calc_2 = calculator(41.695242, 44.793238, 41.710275, 44.766336); // Eleven.window + Lamarzocco\n\t\tlet calc_3 = calculator(41.708954, 44.755021, 41.693138, 44.802658); // Erti Kava + Daily grind\n\t\tassert_ne!(calc_1, calc_2);\n\t\tassert_ne!(calc_1, calc_3);\n\t\tassert_ne!(calc_2, calc_3);\n        ///for index in 0..kofe_list().len() {\n\t\t\t//calculator(lat_user: f64, lon_user: f64, kofe_list()[index].location_x, kofe_list()[index].location_y)\n\t\t//}\n\t}\n}\n"}]}}
2022/05/14 15:53:51 snippets-plugin -> function onBeforeTextEvent(ev) = userdata: 0xc00083bb60
2022/05/14 15:53:51 send rust sending textDocument/didChange Content-Length: 8442

{"jsonrpc": "2.0", "method": "textDocument/didChange", "params": {"textDocument": {"version": 2, "uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs"}, "contentChanges": [{"text": "#![allow(unused)]\n\nuse geo::prelude::*;\nuse geo::point;\nuse carapax::types::{\n\tMessage, MessageData, InputFile, \n\tInlineKeyboardButton, TextEntity,\n};\nuse carapax::methods::SendPhoto;\nuse carapax::{\n    longpoll::LongPoll,\n    methods::SendMessage,\n    types::{ChatId, Text},\n    Api, App, Context, ExecuteError, Ref,\n};\nuse dotenv::dotenv;\nuse std::env;\nuse carapax::types::User;\nuse serde::{Deserialize, Serialize};\n\nuse crate::catalog::kofe_list;\n\nmod catalog;\n\n\n#[derive(Deserialize, Serialize)]\nstruct CallbackData {\n    value: String,\n}\n\nimpl CallbackData {\n    fn new<S: Into<String>>(value: S) -> Self {\n        Self { value: value.into() }\n    }\n}\n\nfn calculator(lat_user: f64, lon_user: f64, location_x: f64, location_y: f64) -> i32 {\n    //let earth_radius_kilometer = 6371.0_f64;\n    //let (user_latitude_degrees, user_longitude_degrees) = (lat_user, lon_user);\n    //let (caffee_latitude_degrees, caffee_longitude_degrees) = (location_x, location_y);\n\n    //let user_latitude = user_latitude_degrees.to_radians();\n    //let caffee_latitude = caffee_latitude_degrees.to_radians();\n\n    //let delta_latitude = (user_latitude_degrees - caffee_latitude_degrees).to_radians();\n    //let delta_longitude = (user_longitude_degrees - caffee_longitude_degrees).to_radians();\n\n    //let central_angle_inner = (delta_latitude / 2.0).sin().powi(2)\n        //+ user_latitude.cos() * caffee_latitude.cos() * (delta_longitude / 2.0).sin().powi(2);\n    //let central_angle = 2.0 * central_angle_inner.sqrt().asin();\n\n    //let result = (earth_radius_kilometer * central_angle * 100000.0).round() as i32;\n    //result\n    (lat_user * lon_user * 1000000.0 - location_x * location_y * 1000000.0) as i32\n}\n\nfn distance(lat_user: f64, lon_user: f64) -> (\nString, String, String, \nString, String, String, \nString, String, String, \nString, String, String ) {\n    // dbg!(&lat_user);\n    // dbg!(&lon_user);\n    let mut temporary_collection = vec![];\n\n    let point_user = point!(x: lat_user, y: lon_user);\n// ITERATION\n    for index in 0..kofe_list().len() {\n\t\tlet calculated_distance: i32 = calculator(lat_user, lon_user, kofe_list()[index].location_x, kofe_list()[index].location_y);\n        //dbg!(&calculated_distance);\n        //let point_destination = point!(x: kofe_list()[index].location_x, y: kofe_list()[index].location_y);\n        //let calculated_distance: i32 = point_user.haversine_distance(&point_destination).round() as i32;\n        temporary_collection.push((\n\t\t\tcalculated_distance,                    // 0\n\t\t\tkofe_list()[index].description.clone(), // 1\n\t\t\tkofe_list()[index].photo.clone(),       // 2\n\t\t\tkofe_list()[index].google_maps.clone(), // 3\n\t\t\tkofe_list()[index].address.clone(),     // 4\n\t\t));\n    }\n    temporary_collection.sort_by(|a, b| a.0.cmp(&b.0));\n    dbg!(&temporary_collection[0].0.clone());\n    //dbg!(&temporary_collection[0].1.clone());\n    dbg!(&temporary_collection[1].0.clone());\n    //dbg!(&temporary_collection[1].1.clone());\n    dbg!(&temporary_collection[2].0.clone());\n    //dbg!(&temporary_collection[2].1.clone());\n    let one   = format!(\"{}\\n\", temporary_collection[0].1);\n    let two   = format!(\"{}\\n\", temporary_collection[1].1);\n    let three = format!(\"{}\\n\", temporary_collection[2].1);\n    (one,  temporary_collection[0].2.clone(), temporary_collection[0].3.clone(), temporary_collection[0].4.clone(), \n    two,   temporary_collection[1].2.clone(), temporary_collection[1].3.clone(), temporary_collection[1].4.clone(), \n    three, temporary_collection[2].2.clone(), temporary_collection[2].3.clone(), temporary_collection[2].4.clone() )\n}\n\nasync fn echo(api: Ref<Api>, chat_id: ChatId, message: Message) -> Result<(), ExecuteError> {\n\t//let method = SendMessage::new(chat_id.clone(), \"TEST\".to_string()).reply_markup(vec![vec![\n        //InlineKeyboardButton::with_url(\"TEST\", \"https://duckduckgo.com/\".to_string()),\n    //]]);\n    //api.execute(method).await?;\n    // dbg!(&message);\n    if let MessageData::Location(location) = message.data {\n        let lon: f64 = location.longitude.into();\n        let lat: f64 = location.latitude.into();\n        let calculated_distance = distance(lon, lat);\n// 1st Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.1.clone())\n                    .await\n                    .unwrap(),\n            )\n            .caption(calculated_distance.0)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ1\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.3.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.2.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n// 2nd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.5).await.unwrap(),\n            )\n            .caption(calculated_distance.4)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ2\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.7.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n\t\t\t\t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.6.to_string()\n\t\t\t),\n        ]]);\n        api.execute(method).await?;\n// 3rd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.9).await.unwrap(),\n            )\n            .caption(calculated_distance.8)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ3\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.11.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.10.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n        // dbg!(\"F\");\n    } else {\n\t\tlet warning_message = \"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.\".to_string();\n\t\tlet method = SendMessage::new(chat_id.clone(), warning_message);\n        api.execute(method).await?;\n\t};\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    dotenv().ok();\n    env_logger::init();\n\n    let token = env::var(\"CARAPAX_TOKEN\").expect(\"CARAPAX_TOKEN is not set\");\n    let api = Api::new(token).expect(\"Failed to create API\");\n\n    let mut context = Context::default();\n    context.insert(api.clone());\n\n    let app = App::new(context, echo);\n    LongPoll::new(api, app).run().await\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\t#[test]\n\tfn fabrika_eleven_window() {\n        let list_1 = distance(41.709530, 44.802610); // FABRIKA\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t#[test]\n\tfn lamarzocco_eleven_window() {\n        let list_1 = distance(41.710275, 44.766336); // Lamarzocco\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t\n\t#[test]\n\tfn calculator_1() {\n\t\tlet calc_1 = calculator(41.710275, 44.766336, 41.710275, 44.766336); // Lamarzocco + Lamarzocco\n\t\tlet calc_2 = calculator(41.695242, 44.793238, 41.710275, 44.766336); // Eleven.window + Lamarzocco\n\t\tlet calc_3 = calculator(41.708954, 44.755021, 41.693138, 44.802658); // Erti Kava + Daily grind\n\t\tassert_ne!(calc_1, calc_2);\n\t\tassert_ne!(calc_1, calc_3);\n\t\tassert_ne!(calc_2, calc_3);\n        //for index in 0..kofe_list().len() {\n\t\t\t//calculator(lat_user: f64, lon_user: f64, kofe_list()[index].location_x, kofe_list()[index].location_y)\n\t\t//}\n\t}\n}\n"}]}}
2022/05/14 15:53:52 send rust sending textDocument/didChange Content-Length: 8442

{"jsonrpc": "2.0", "method": "textDocument/didChange", "params": {"textDocument": {"version": 3, "uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs"}, "contentChanges": [{"text": "#![allow(unused)]\n\nuse geo::prelude::*;\nuse geo::point;\nuse carapax::types::{\n\tMessage, MessageData, InputFile, \n\tInlineKeyboardButton, TextEntity,\n};\nuse carapax::methods::SendPhoto;\nuse carapax::{\n    longpoll::LongPoll,\n    methods::SendMessage,\n    types::{ChatId, Text},\n    Api, App, Context, ExecuteError, Ref,\n};\nuse dotenv::dotenv;\nuse std::env;\nuse carapax::types::User;\nuse serde::{Deserialize, Serialize};\n\nuse crate::catalog::kofe_list;\n\nmod catalog;\n\n\n#[derive(Deserialize, Serialize)]\nstruct CallbackData {\n    value: String,\n}\n\nimpl CallbackData {\n    fn new<S: Into<String>>(value: S) -> Self {\n        Self { value: value.into() }\n    }\n}\n\nfn calculator(lat_user: f64, lon_user: f64, location_x: f64, location_y: f64) -> i32 {\n    //let earth_radius_kilometer = 6371.0_f64;\n    //let (user_latitude_degrees, user_longitude_degrees) = (lat_user, lon_user);\n    //let (caffee_latitude_degrees, caffee_longitude_degrees) = (location_x, location_y);\n\n    //let user_latitude = user_latitude_degrees.to_radians();\n    //let caffee_latitude = caffee_latitude_degrees.to_radians();\n\n    //let delta_latitude = (user_latitude_degrees - caffee_latitude_degrees).to_radians();\n    //let delta_longitude = (user_longitude_degrees - caffee_longitude_degrees).to_radians();\n\n    //let central_angle_inner = (delta_latitude / 2.0).sin().powi(2)\n        //+ user_latitude.cos() * caffee_latitude.cos() * (delta_longitude / 2.0).sin().powi(2);\n    //let central_angle = 2.0 * central_angle_inner.sqrt().asin();\n\n    //let result = (earth_radius_kilometer * central_angle * 100000.0).round() as i32;\n    //result\n    (lat_user * lon_user * 1000000.0 - location_x * location_y * 1000000.0) as i32\n}\n\nfn distance(lat_user: f64, lon_user: f64) -> (\nString, String, String, \nString, String, String, \nString, String, String, \nString, String, String ) {\n    // dbg!(&lat_user);\n    // dbg!(&lon_user);\n    let mut temporary_collection = vec![];\n\n    let point_user = point!(x: lat_user, y: lon_user);\n// ITERATION\n    for index in 0..kofe_list().len() {\n\t\tlet calculated_distance: i32 = calculator(lat_user, lon_user, kofe_list()[index].location_x, kofe_list()[index].location_y);\n        //dbg!(&calculated_distance);\n        //let point_destination = point!(x: kofe_list()[index].location_x, y: kofe_list()[index].location_y);\n        //let calculated_distance: i32 = point_user.haversine_distance(&point_destination).round() as i32;\n        temporary_collection.push((\n\t\t\tcalculated_distance,                    // 0\n\t\t\tkofe_list()[index].description.clone(), // 1\n\t\t\tkofe_list()[index].photo.clone(),       // 2\n\t\t\tkofe_list()[index].google_maps.clone(), // 3\n\t\t\tkofe_list()[index].address.clone(),     // 4\n\t\t));\n    }\n    temporary_collection.sort_by(|a, b| a.0.cmp(&b.0));\n    dbg!(&temporary_collection[0].0.clone());\n    //dbg!(&temporary_collection[0].1.clone());\n    dbg!(&temporary_collection[1].0.clone());\n    //dbg!(&temporary_collection[1].1.clone());\n    dbg!(&temporary_collection[2].0.clone());\n    //dbg!(&temporary_collection[2].1.clone());\n    let one   = format!(\"{}\\n\", temporary_collection[0].1);\n    let two   = format!(\"{}\\n\", temporary_collection[1].1);\n    let three = format!(\"{}\\n\", temporary_collection[2].1);\n    (one,  temporary_collection[0].2.clone(), temporary_collection[0].3.clone(), temporary_collection[0].4.clone(), \n    two,   temporary_collection[1].2.clone(), temporary_collection[1].3.clone(), temporary_collection[1].4.clone(), \n    three, temporary_collection[2].2.clone(), temporary_collection[2].3.clone(), temporary_collection[2].4.clone() )\n}\n\nasync fn echo(api: Ref<Api>, chat_id: ChatId, message: Message) -> Result<(), ExecuteError> {\n\t//let method = SendMessage::new(chat_id.clone(), \"TEST\".to_string()).reply_markup(vec![vec![\n        //InlineKeyboardButton::with_url(\"TEST\", \"https://duckduckgo.com/\".to_string()),\n    //]]);\n    //api.execute(method).await?;\n    // dbg!(&message);\n    if let MessageData::Location(location) = message.data {\n        let lon: f64 = location.longitude.into();\n        let lat: f64 = location.latitude.into();\n        let calculated_distance = distance(lon, lat);\n// 1st Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.1.clone())\n                    .await\n                    .unwrap(),\n            )\n            .caption(calculated_distance.0)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ1\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.3.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.2.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n// 2nd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.5).await.unwrap(),\n            )\n            .caption(calculated_distance.4)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ2\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.7.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n\t\t\t\t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.6.to_string()\n\t\t\t),\n        ]]);\n        api.execute(method).await?;\n// 3rd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.9).await.unwrap(),\n            )\n            .caption(calculated_distance.8)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ3\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.11.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.10.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n        // dbg!(\"F\");\n    } else {\n\t\tlet warning_message = \"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.\".to_string();\n\t\tlet method = SendMessage::new(chat_id.clone(), warning_message);\n        api.execute(method).await?;\n\t};\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    dotenv().ok();\n    env_logger::init();\n\n    let token = env::var(\"CARAPAX_TOKEN\").expect(\"CARAPAX_TOKEN is not set\");\n    let api = Api::new(token).expect(\"Failed to create API\");\n\n    let mut context = Context::default();\n    context.insert(api.clone());\n\n    let app = App::new(context, echo);\n    LongPoll::new(api, app).run().await\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\t#[test]\n\tfn fabrika_eleven_window() {\n        let list_1 = distance(41.709530, 44.802610); // FABRIKA\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t#[test]\n\tfn lamarzocco_eleven_window() {\n        let list_1 = distance(41.710275, 44.766336); // Lamarzocco\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t\n\t#[test]\n\tfn calculator_1() {\n\t\tlet calc_1 = calculator(41.710275, 44.766336, 41.710275, 44.766336); // Lamarzocco + Lamarzocco\n\t\tlet calc_2 = calculator(41.695242, 44.793238, 41.710275, 44.766336); // Eleven.window + Lamarzocco\n\t\tlet calc_3 = calculator(41.708954, 44.755021, 41.693138, 44.802658); // Erti Kava + Daily grind\n\t\tassert_ne!(calc_1, calc_2);\n\t\tassert_ne!(calc_1, calc_3);\n\t\tassert_ne!(calc_2, calc_3);\n        //for index in 0..kofe_list().len() {\n\t\t\t//calculator(lat_user: f64, lon_user: f64, kofe_list()[index].location_x, kofe_list()[index].location_y)\n\t\t//}\n\t}\n}\n"}]}}
2022/05/14 15:53:52 send rust sending textDocument/formatting Content-Length: 203

{"jsonrpc": "2.0", "id": 6, "method": "textDocument/formatting", "params": {"textDocument": {"uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs"}, "options": {"tabSize": 4, "insertSpaces": true}}}
2022/05/14 15:53:52 send rust sending textDocument/didChange Content-Length: 8442

{"jsonrpc": "2.0", "method": "textDocument/didChange", "params": {"textDocument": {"version": 4, "uri": "file:///home/mike/projects/tgbot/kofe/src/main.rs"}, "contentChanges": [{"text": "#![allow(unused)]\n\nuse geo::prelude::*;\nuse geo::point;\nuse carapax::types::{\n\tMessage, MessageData, InputFile, \n\tInlineKeyboardButton, TextEntity,\n};\nuse carapax::methods::SendPhoto;\nuse carapax::{\n    longpoll::LongPoll,\n    methods::SendMessage,\n    types::{ChatId, Text},\n    Api, App, Context, ExecuteError, Ref,\n};\nuse dotenv::dotenv;\nuse std::env;\nuse carapax::types::User;\nuse serde::{Deserialize, Serialize};\n\nuse crate::catalog::kofe_list;\n\nmod catalog;\n\n\n#[derive(Deserialize, Serialize)]\nstruct CallbackData {\n    value: String,\n}\n\nimpl CallbackData {\n    fn new<S: Into<String>>(value: S) -> Self {\n        Self { value: value.into() }\n    }\n}\n\nfn calculator(lat_user: f64, lon_user: f64, location_x: f64, location_y: f64) -> i32 {\n    //let earth_radius_kilometer = 6371.0_f64;\n    //let (user_latitude_degrees, user_longitude_degrees) = (lat_user, lon_user);\n    //let (caffee_latitude_degrees, caffee_longitude_degrees) = (location_x, location_y);\n\n    //let user_latitude = user_latitude_degrees.to_radians();\n    //let caffee_latitude = caffee_latitude_degrees.to_radians();\n\n    //let delta_latitude = (user_latitude_degrees - caffee_latitude_degrees).to_radians();\n    //let delta_longitude = (user_longitude_degrees - caffee_longitude_degrees).to_radians();\n\n    //let central_angle_inner = (delta_latitude / 2.0).sin().powi(2)\n        //+ user_latitude.cos() * caffee_latitude.cos() * (delta_longitude / 2.0).sin().powi(2);\n    //let central_angle = 2.0 * central_angle_inner.sqrt().asin();\n\n    //let result = (earth_radius_kilometer * central_angle * 100000.0).round() as i32;\n    //result\n    (lat_user * lon_user * 1000000.0 - location_x * location_y * 1000000.0) as i32\n}\n\nfn distance(lat_user: f64, lon_user: f64) -> (\nString, String, String, \nString, String, String, \nString, String, String, \nString, String, String ) {\n    // dbg!(&lat_user);\n    // dbg!(&lon_user);\n    let mut temporary_collection = vec![];\n\n    let point_user = point!(x: lat_user, y: lon_user);\n// ITERATION\n    for index in 0..kofe_list().len() {\n\t\tlet calculated_distance: i32 = calculator(lat_user, lon_user, kofe_list()[index].location_x, kofe_list()[index].location_y);\n        //dbg!(&calculated_distance);\n        //let point_destination = point!(x: kofe_list()[index].location_x, y: kofe_list()[index].location_y);\n        //let calculated_distance: i32 = point_user.haversine_distance(&point_destination).round() as i32;\n        temporary_collection.push((\n\t\t\tcalculated_distance,                    // 0\n\t\t\tkofe_list()[index].description.clone(), // 1\n\t\t\tkofe_list()[index].photo.clone(),       // 2\n\t\t\tkofe_list()[index].google_maps.clone(), // 3\n\t\t\tkofe_list()[index].address.clone(),     // 4\n\t\t));\n    }\n    temporary_collection.sort_by(|a, b| a.0.cmp(&b.0));\n    dbg!(&temporary_collection[0].0.clone());\n    //dbg!(&temporary_collection[0].1.clone());\n    dbg!(&temporary_collection[1].0.clone());\n    //dbg!(&temporary_collection[1].1.clone());\n    dbg!(&temporary_collection[2].0.clone());\n    //dbg!(&temporary_collection[2].1.clone());\n    let one   = format!(\"{}\\n\", temporary_collection[0].1);\n    let two   = format!(\"{}\\n\", temporary_collection[1].1);\n    let three = format!(\"{}\\n\", temporary_collection[2].1);\n    (one,  temporary_collection[0].2.clone(), temporary_collection[0].3.clone(), temporary_collection[0].4.clone(), \n    two,   temporary_collection[1].2.clone(), temporary_collection[1].3.clone(), temporary_collection[1].4.clone(), \n    three, temporary_collection[2].2.clone(), temporary_collection[2].3.clone(), temporary_collection[2].4.clone() )\n}\n\nasync fn echo(api: Ref<Api>, chat_id: ChatId, message: Message) -> Result<(), ExecuteError> {\n\t//let method = SendMessage::new(chat_id.clone(), \"TEST\".to_string()).reply_markup(vec![vec![\n        //InlineKeyboardButton::with_url(\"TEST\", \"https://duckduckgo.com/\".to_string()),\n    //]]);\n    //api.execute(method).await?;\n    // dbg!(&message);\n    if let MessageData::Location(location) = message.data {\n        let lon: f64 = location.longitude.into();\n        let lat: f64 = location.latitude.into();\n        let calculated_distance = distance(lon, lat);\n// 1st Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.1.clone())\n                    .await\n                    .unwrap(),\n            )\n            .caption(calculated_distance.0)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ1\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.3.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.2.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n// 2nd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.5).await.unwrap(),\n            )\n            .caption(calculated_distance.4)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ2\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.7.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n\t\t\t\t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.6.to_string()\n\t\t\t),\n        ]]);\n        api.execute(method).await?;\n// 3rd Cafe\n        api.execute(\n            SendPhoto::new(\n                chat_id.clone(),\n                InputFile::path(calculated_distance.9).await.unwrap(),\n            )\n            .caption(calculated_distance.8)\n            .caption_entities(&[TextEntity::bold(0..10)]).unwrap(),\n        )\n        .await?;\n// BUTTON ‚Ññ3\n        let method = SendMessage::new(\n\t\t\tchat_id.clone(), calculated_distance.11.to_string()\n\t\t).reply_markup(vec![vec![\n            InlineKeyboardButton::with_url(\n            \t\"üìç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ\", calculated_distance.10.to_string()\n            ),\n        ]]);\n        api.execute(method).await?;\n        // dbg!(\"F\");\n    } else {\n\t\tlet warning_message = \"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.\".to_string();\n\t\tlet method = SendMessage::new(chat_id.clone(), warning_message);\n        api.execute(method).await?;\n\t};\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() {\n    dotenv().ok();\n    env_logger::init();\n\n    let token = env::var(\"CARAPAX_TOKEN\").expect(\"CARAPAX_TOKEN is not set\");\n    let api = Api::new(token).expect(\"Failed to create API\");\n\n    let mut context = Context::default();\n    context.insert(api.clone());\n\n    let app = App::new(context, echo);\n    LongPoll::new(api, app).run().await\n}\n\n#[cfg(test)]\nmod tests {\n\tuse super::*;\n\t#[test]\n\tfn fabrika_eleven_window() {\n        let list_1 = distance(41.709530, 44.802610); // FABRIKA\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t#[test]\n\tfn lamarzocco_eleven_window() {\n        let list_1 = distance(41.710275, 44.766336); // Lamarzocco\n        let list_2 = distance(41.695242, 44.793238); // Eleven.window\n        assert_ne!(list_1, list_2);\n\t}\n\t\n\t#[test]\n\tfn calculator_1() {\n\t\tlet calc_1 = calculator(41.710275, 44.766336, 41.710275, 44.766336); // Lamarzocco + Lamarzocco\n\t\tlet calc_2 = calculator(41.695242, 44.793238, 41.710275, 44.766336); // Eleven.window + Lamarzocco\n\t\tlet calc_3 = calculator(41.708954, 44.755021, 41.693138, 44.802658); // Erti Kava + Daily grind\n\t\tassert_ne!(calc_1, calc_2);\n\t\tassert_ne!(calc_1, calc_3);\n\t\tassert_ne!(calc_2, calc_3);\n        //for index in 0..kofe_list().len() {\n\t\t\t//calculator(lat_user: f64, lon_user: f64, kofe_list()[index].location_x, kofe_list()[index].location_y)\n\t\t//}\n\t}\n}\n"}]}}
